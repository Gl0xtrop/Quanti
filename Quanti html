<html><head><base href="https://html-css-js.com">
<meta charset="UTF-8">
<title>AI Assistant GPT-4 Style</title>
<style>
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, sans-serif;
    margin: 0;
    padding: 0;
    background: #343541;
    color: #fff;
    min-height: 100vh;
    display: flex;
  }

  .chat-container {
    max-width: 100%;
    margin: 0;
    background: transparent;
    border-radius: 0;
    padding: 0;
    box-shadow: none;
    display: flex;
    flex-direction: column;
    height: 100vh;
    width: 100%;
    margin-left: 260px;
    transition: margin-left 0.3s ease;
  }

  .chat-container.with-history {
    width: calc(100% - 260px);
    margin-left: 260px;
  }

  .chat-header {
    background: #202123;
    padding: 12px 20px;
    border-bottom: 1px solid #2a2b32;
    margin-bottom: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .chat-header h1 {
    font-size: 18px;
    margin: 0;
    color: #ececf1;
    margin-left: 20px;
  }

  .header-buttons {
    display: flex;
    gap: 10px;
    margin-top: 0;
  }

  #new-chat-btn {
    background: #343541;
    border: 1px solid #565869;
    color: #ececf1;
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.2s;
  }

  #new-chat-btn:hover {
    background: #4d4d4f;
  }

  .chat-messages {
    flex-grow: 1;
    height: calc(100vh - 140px);
    overflow-y: auto;
    padding: 0;
    background: transparent;
    border-radius: 0;
    margin-bottom: 0;
  }

  .message {
    border-radius: 0;
    max-width: 768px;
    margin: 0 auto;
    padding: 24px;
    animation: none;
    line-height: 1.6;
    display: flex;
    align-items: flex-start;
  }

  .user-message {
    background: #343541;
    margin-left: 0;
    border-bottom: 1px solid #2a2b32;
    justify-content: flex-end;
  }

  .ai-message {
    background: #444654;
    border-bottom: 1px solid #2a2b32;
    justify-content: flex-start;
  }

  .message-content {
    max-width: 90%;
    padding: 8px 16px;
    border-radius: 8px;
    white-space: pre-wrap;
    word-break: break-word;
  }

  .user-message .message-content {
    background: #40414F;
    margin-left: 20px;
  }

  .ai-message .message-content {
    background: #444654;
    margin-right: 20px;
  }

  .avatar {
    width: 36px;
    height: 36px;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
  }

  .user-avatar {
    background: #5436DA;
  }

  .ai-avatar {
    background: transparent;
    width: 36px;
    height: 36px;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
  }

  .ai-avatar img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    border-radius: 4px;
  }

  .input-container {
    background: #343541;
    max-width: 768px;
    margin: 0 auto;
    padding: 24px;
    border-top: 1px solid #4d4d4f;
    position: relative;
  }

  #user-input {
    max-width: 768px;
    margin: 0 auto;
    display: block;
    width: 100%;
    padding: 12px 40px 12px 16px;
    border: 1px solid #2a2b32;
    border-radius: 8px;
    background: #40414f;
    color: #fff;
    font-size: 16px;
    line-height: 1.5;
    resize: none;
    height: 44px;
    box-shadow: 0 0 8px rgba(0,0,0,0.1);
  }

  #user-input:focus {
    outline: none;
    border-color: #565869;
    box-shadow: 0 0 0 1px #565869;
  }

  #send-btn {
    position: absolute;
    right: 30px;
    bottom: 28px;
    background: transparent;
    border: none;
    color: #acacbe;
    padding: 8px;
    cursor: pointer;
    transition: color 0.2s;
  }

  #send-btn:hover {
    color: #fff;
    transform: none;
    box-shadow: none;
  }

  .tools-container, .suggestions {
    display: none;
  }

  .code-block {
    background: #1e1e1e;
    border-radius: 6px;
    margin: 10px 0;
    font-family: 'Fira Code', monospace;
  }

  .language-indicator {
    padding: 8px 12px;
    background: #2d2d2d;
    border-top-left-radius: 6px;
    border-top-right-radius: 6px;
    font-size: 12px;
    color: #8e8e8e;
  }

  .chat-history {
    position: fixed;
    left: -260px;
    top: 0;
    width: 260px;
    height: 100vh;
    background: #202123;
    border-right: 1px solid #2a2b32;
    padding: 10px;
    overflow-y: auto;
    transition: left 0.3s ease;
    z-index: 100;
  }

  .chat-history.visible {
    left: 0;
  }

  .chat-history-item {
    padding: 10px 12px;
    margin-bottom: 4px;
    border-radius: 4px;
    cursor: pointer;
    color: #ececf1;
    font-size: 14px;
    transition: background 0.2s;
    display: flex;
    align-items: center;
    gap: 8px;
    border: 1px solid transparent;
  }

  .chat-history-item:hover {
    background: #2a2b32;
    border-color: transparent;
  }

  .chat-history-item .icon {
    font-size: 16px;
    opacity: 0.8;
  }

  .chat-history-toggle {
    position: fixed;
    left: 20px;
    top: 20px;
    z-index: 101;
    background: transparent;
    border: none;
    color: #fff;
    cursor: pointer;
    display: none;
  }

  @media (max-width: 768px) {
    .chat-container.with-history {
      margin-left: 0;
      width: 100%;
    }
    
    .chat-history {
      transform: translateX(-100%);
    }
    
    .chat-history.visible {
      transform: translateX(0);
    }
    
    .chat-container {
      margin-left: 0;
      width: 100%;
    }
    
    .chat-history-toggle {
      display: block;
    }
  }
  
  .typing-effect::after {
    content: '▋';
    display: inline-block;
    animation: blink 1s step-end infinite;
  }

  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }
  
  /* Add styles for search results */
  .search-source {
    font-size: 0.8em;
    color: #888;
    margin-top: 10px;
    font-style: italic;
  }
</style>
</head>
<body>
<div class="chat-container">
  <div class="chat-header">
    <h1>Quanti</h1>
    <div class="header-buttons">
      <button id="new-chat-btn">+ New Chat</button>
    </div>
  </div>
  
  <div class="chat-messages" id="chat-messages">
    <div class="message ai-message">
      <div class="avatar ai-avatar">
        <img src="/a/ed07eba3-87d8-4778-a0f5-e280f453f59d" alt="Quanti Logo">
      </div>
      <div class="message-content">&#xa1;Hola! Soy Quanti, tu asistente virtual avanzado con capacidades similares a GPT-4. Puedo ayudarte con:
      &#x2022; Programaci&#xf3;n en m&#xfa;ltiples lenguajes (Python, JavaScript, HTML, Lua, etc.)
      &#x2022; Explicaciones detalladas sobre cualquier tema
      &#x2022; An&#xe1;lisis y resoluci&#xf3;n de problemas complejos
      &#x2022; Conversaci&#xf3;n natural y apoyo en diversos temas

      &#xbf;En qu&#xe9; puedo ayudarte hoy?</div>
    </div>
  </div>

  <div class="input-container">
    <input type="text" id="user-input" placeholder="Escribe tu mensaje aqu&#xed;... Presiona Enter para enviar">
    <button id="send-btn">Enviar</button>
  </div>
</div>

<div class="chat-history">
</div>
<button class="chat-history-toggle">Toggle Chat History</button>

<script>
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendBtn = document.getElementById('send-btn');
const newChatBtn = document.getElementById('new-chat-btn');
const conversationContext = {
  messages: [],
  personality: {
    tone: 'adaptive',
    creativity: 0.9,
    helpfulness: 0.95,
    intelligence: 0.98,
    expertise: {
      programming: 0.95,
      science: 0.95,
      math: 0.95,
      general: 0.95
    }
  },
  memory: {
    shortTerm: new Map(),
    longTerm: new Map(),
    conceptual: new Map(),
    semantic: new Set()
  },
  tools: {
    enabled: ['search', 'calculator', 'codeExecution', 'imageGeneration', 'dataAnalysis', 'nlp']
  },
  state: {
    currentTopic: null,
    contextDepth: 0,
    relevantConcepts: new Set(),
    confidenceLevel: 0
  }
};
const languageDetector = {
  detect(text) {
    const languages = {
      es: ['qué', 'cómo', 'hola', 'gracias', 'por', 'favor', 'ñ', 'á', 'é', 'í', 'ó', 'ú'],
      en: ['what', 'how', 'hello', 'thanks', 'please', 'the', 'is', 'are', 'where']
    };
    text = text.toLowerCase();
    let scores = {
      es: 0,
      en: 0
    };
    for (let [lang, words] of Object.entries(languages)) {
      for (let word of words) {
        if (text.includes(word)) {
          scores[lang]++;
        }
      }
    }
    return Object.entries(scores).reduce((a, b) => b[1] > a[1] ? b : a)[0];
  }
};
const googleTools = {
  async searchGoogle(query) {
    try {
      const response = await fetch('/api/google_search', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          query
        })
      });
      return await response.json();
    } catch (error) {
      console.error('Google search error:', error);
      return null;
    }
  },
  async getKnowledgeGraph(query) {
    try {
      const response = await fetch('/api/knowledge_graph', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          query
        })
      });
      return await response.json();
    } catch (error) {
      console.error('Knowledge graph error:', error);
      return null;
    }
  }
};
const tools = {
  async webSearch(query) {
    try {
      const response = await fetch('/api/search', {
        method: 'POST',
        body: JSON.stringify({
          query
        })
      });
      return await response.json();
    } catch (error) {
      console.error('Search error:', error);
      return null;
    }
  },
  async generateImage(prompt) {
    try {
      const response = await fetch('/api/image_generation', {
        method: 'POST',
        body: JSON.stringify({
          prompt
        })
      });
      return await response.json();
    } catch (error) {
      console.error('Image generation error:', error);
      return null;
    }
  },
  calculator(expression) {
    try {
      return {
        result: Function(`"use strict"; return (${expression})`)()
      };
    } catch (error) {
      return {
        error: 'Invalid expression'
      };
    }
  }
};
const spotifyAPI = {
  async getToken() {
    try {
      const response = await fetch('/api/spotify/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          client_id: 'YOUR_CLIENT_ID',
          client_secret: 'YOUR_CLIENT_SECRET'
        })
      });
      const data = await response.json();
      return data.access_token;
    } catch (error) {
      console.error('Error getting Spotify token:', error);
      return null;
    }
  },
  async getArtistData(artistId) {
    try {
      const token = await this.getToken();
      if (!token) return null;
      const response = await fetch(`https://api.spotify.com/v1/artists/${artistId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      if (response.status === 200) {
        const data = await response.json();
        return {
          name: data.name,
          followers: data.followers.total,
          popularity: data.popularity,
          genres: data.genres,
          images: data.images
        };
      }
      return null;
    } catch (error) {
      console.error('Error getting artist data:', error);
      return null;
    }
  }
};
async function typeMessage(messageDiv, text, speed = 10) {
  if (!messageDiv || !text) {
    throw new Error('Invalid parameters for typeMessage');
  }
  let index = 0;
  messageDiv.textContent = '';
  messageDiv.classList.add('typing-effect');
  return new Promise((resolve, reject) => {
    try {
      function addChar() {
        if (index < text.length) {
          messageDiv.textContent += text.charAt(index);
          index++;
          setTimeout(addChar, speed);
        } else {
          messageDiv.classList.remove('typing-effect');
          resolve();
        }
      }
      addChar();
    } catch (error) {
      reject(error);
    }
  });
}
const responseCache = new Map();
async function getAIResponse(message) {
  const detectedLanguage = languageDetector.detect(message);
  if (message.toLowerCase().includes('buscar') || message.toLowerCase().includes('search') || message.toLowerCase().includes('find') || message.toLowerCase().includes('información')) {
    try {
      const googleResults = await googleTools.searchGoogle(message);
      const knowledgeGraph = await googleTools.getKnowledgeGraph(message);
      if (googleResults || knowledgeGraph) {
        const response = {
          message: `${detectedLanguage === 'es' ? 'Encontré esta información:' : 'I found this information:'}\n\n${knowledgeGraph ? `${knowledgeGraph.title}\n${knowledgeGraph.description}\n\n` : ''}${googleResults ? googleResults.snippets.join('\n\n') : ''}`,
          confidence: 0.9,
          metadata: {
            responseLanguage: detectedLanguage,
            type: 'search_results',
            source: 'google'
          }
        };
        return response;
      }
    } catch (error) {
      console.error('Error processing Google search:', error);
    }
  }
  // Check if message is requesting Roblox scripts
  if (message.toLowerCase().includes('roblox') || 
      message.toLowerCase().includes('lua') || 
      message.toLowerCase().includes('script')) {
    const robloxScriptTemplates = {
      baseGame: {
        playerScript: `-- Basic Player Script
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Player Configuration
local WALK_SPEED = 16
local JUMP_POWER = 50

-- Set default player properties
character.Humanoid.WalkSpeed = WALK_SPEED
character.Humanoid.JumpPower = JUMP_POWER

-- Handle character respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    character.Humanoid.WalkSpeed = WALK_SPEED
    character.Humanoid.JumpPower = JUMP_POWER
end)`,
        gameScript: `-- Game Configuration Script
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerStorage = game:GetService("ServerStorage")
local Players = game:GetService("Players")

-- Game Settings
local RESPAWN_TIME = 5
local MAX_PLAYERS = 10

-- Initialize game state
local gameState = {
    isRoundActive = false,
    playerScores = {},
    roundTime = 0
}

-- Player join handling
Players.PlayerAdded:Connect(function(player)
    print(player.Name .. " joined the game!")
    gameState.playerScores[player.Name] = 0
end)

-- Player leave handling
Players.PlayerRemoving:Connect(function(player)
    print(player.Name .. " left the game!")
    gameState.playerScores[player.Name] = nil
end)`
      },
      combat: {
        weaponScript: `-- Basic Weapon Script
local Tool = script.Parent
local Handle = Tool:WaitForChild("Handle")
local Players = game:GetService("Players")
local Damage = 10

local function onActivated()
    local character = Tool.Parent
    local humanoid = character:FindFirstChild("Humanoid")
    local player = Players:GetPlayerFromCharacter(character)
    
    if not player or not humanoid then return end
    
    -- Create hitbox and detect hits
    local hitbox = Instance.new("Part")
    hitbox.Size = Vector3.new(4, 4, 4)
    hitbox.Transparency = 1
    hitbox.CanCollide = false
    
    -- Attack animation and damage logic here
end

Tool.Activated:Connect(onActivated)`
      },
      ui: {
        guiScript: `-- Basic GUI Script
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Create main GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MainGui"
screenGui.Parent = playerGui

-- Create frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0.2, 0, 0.3, 0)
mainFrame.Position = UDim2.new(0.8, 0, 0, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- Add text label
local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, 0, 0.2, 0)
titleLabel.Text = "Player Stats"
titleLabel.TextColor3 = Color3.new(1, 1, 1)
titleLabel.BackgroundTransparency = 1
titleLabel.Parent = mainFrame`
      }
    };

    function generateRobloxScript(type = 'random') {
      const categories = Object.keys(robloxScriptTemplates);
      const randomCategory = categories[Math.floor(Math.random() * categories.length)];
      const templates = robloxScriptTemplates[randomCategory];
      const templateKeys = Object.keys(templates);
      const randomTemplate = templateKeys[Math.floor(Math.random() * templateKeys.length)];
      
      return {
        code: templates[randomTemplate],
        type: randomCategory,
        name: randomTemplate,
        language: 'lua'
      };
    }

    const script = generateRobloxScript();
    const response = {
      message: detectedLanguage === 'es' 
        ? `Aquí tienes un script de Roblox para ${script.type} (${script.name}):`
        : `Here's a Roblox script for ${script.type} (${script.name}):`,
      codeExample: {
        language: 'lua',
        code: script.code
      },
      confidence: 0.95,
      metadata: {
        responseLanguage: detectedLanguage,
        type: 'code_generation',
        platform: 'roblox'
      }
    };
    return response;
  }
  const context = {
    message,
    preferredLanguage: detectedLanguage,
    lastMessages: conversationContext.messages.slice(-3)
  };
  try {
    const response = await fetch('/api/ai_completion', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        prompt: `You are an AI assistant. 
        IMPORTANT: Respond in ${detectedLanguage === 'es' ? 'Spanish' : 'English'} language.
        Provide concise, direct answers.
        
        interface Response {
          message: string;
          confidence: number;
          metadata: {
            responseLanguage: string;
          }
        }`,
        data: context
      })
    });
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error:', error);
    return fallbackResponse(detectedLanguage);
  }
}
async function analyzeUserInput(message) {
  return {
    timestamp: Date.now()
  };
}
function buildEnhancedContext(analysis) {
  return {
    analysis,
    systemCapabilities: {
      ...conversationContext.tools,
      googleSearch: true,
      knowledgeGraph: true
    }
  };
}
async function addMessage(content, isUser = false) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
  const avatar = document.createElement('div');
  avatar.className = `avatar ${isUser ? 'user-avatar' : 'ai-avatar'}`;
  if (isUser) {
    avatar.innerHTML = '👤';
  } else {
    const logoImg = document.createElement('img');
    logoImg.src = '/a/ed07eba3-87d8-4778-a0f5-e280f453f59d';
    logoImg.alt = 'Quanti Logo';
    avatar.appendChild(logoImg);
  }
  const contentDiv = document.createElement('div');
  contentDiv.className = 'message-content';
  messageDiv.appendChild(avatar);
  messageDiv.appendChild(contentDiv);
  chatMessages.appendChild(messageDiv);
  try {
    if (typeof content === 'string') {
      if (isUser) {
        contentDiv.textContent = content;
        conversationContext.messages.push({
          role: 'user',
          content
        });
      } else {
        await typeMessage(contentDiv, content, 25);
        conversationContext.messages.push({
          role: 'assistant',
          content
        });
      }
    } else if (content && typeof content === 'object') {
      const message = content.message || 'Lo siento, hubo un error generando la respuesta.';
      await renderEnhancedContent(contentDiv, {
        message,
        codeExample: content.codeExample
      });
      conversationContext.messages.push({
        role: 'assistant',
        content: message
      });
    } else {
      contentDiv.textContent = 'Error: Contenido de mensaje inválido';
    }
  } catch (error) {
    console.error('Error adding message:', error);
    contentDiv.textContent = 'Error al mostrar el mensaje';
  }
  chatMessages.scrollTop = chatMessages.scrollHeight;
}
async function renderEnhancedContent(messageDiv, content) {
  if (!content || !content.message) {
    messageDiv.textContent = 'Error: Contenido inválido';
    return;
  }
  try {
    await typeMessage(messageDiv, content.message, 10);
    if (content.metadata?.type === 'search_results') {
      const sourceDiv = document.createElement('div');
      sourceDiv.className = 'search-source';
      sourceDiv.textContent = 'Fuente: Google Search';
      messageDiv.appendChild(sourceDiv);
    }
    if (content.codeExample) {
      const codeContainer = document.createElement('div');
      renderCodeBlock(codeContainer, content.codeExample);
      messageDiv.appendChild(codeContainer);
    }
  } catch (error) {
    console.error('Error rendering content:', error);
    messageDiv.textContent = 'Error al mostrar el contenido';
  }
}
function extractTopics(message) {
  return Promise.resolve(["topic1", "topic2"]);
}
function determineIntent(message) {
  return Promise.resolve("intent");
}
function assessComplexity(message) {
  return 0.5;
}
function identifyRequiredExpertise(message, topics) {
  return "expertise";
}
function filterRelevantHistory(topics) {
  return ["history1", "history2"];
}
function getDomainKnowledge(expertise) {
  return "knowledge";
}
function findConceptualConnections(topics) {
  return ["connection1", "connection2"];
}
function renderCodeBlock(messageDiv, codeExample) {
  const codeBlock = document.createElement('div');
  codeBlock.className = 'code-block';
  const copyBtn = document.createElement('button');
  copyBtn.className = 'copy-btn';
  copyBtn.textContent = 'Copiar';
  copyBtn.onclick = () => {
    navigator.clipboard.writeText(codeExample.code);
    copyBtn.textContent = '¡Copiado!';
    setTimeout(() => copyBtn.textContent = 'Copiar', 2000);
  };
  codeBlock.innerHTML = `
    <div class="language-indicator">
      ${codeExample.language}
      ${copyBtn.outerHTML}
    </div>
    ${codeExample.code}
  `;
  messageDiv.appendChild(codeBlock);
}
function enhanceResponse(data) {}
function fallbackResponse(language = 'es') {
  const responses = {
    es: {
      message: "Lo siento, ha ocurrido un error. Por favor, intenta de nuevo en unos momentos.",
      tone: "conversational"
    },
    en: {
      message: "Sorry, an error occurred. Please try again in a moment.",
      tone: "conversational"
    }
  };
  return responses[language] || responses.en;
}
async function handleUserInput() {
  const message = userInput.value.trim();
  if (!message) return;
  try {
    await addMessage(message, true);
    userInput.value = '';
    userInput.focus();
    const aiResponse = await getAIResponse(message);
    if (aiResponse) {
      await addMessage(aiResponse);
    } else {
      await addMessage('Lo siento, no pude generar una respuesta. Por favor intenta de nuevo.');
    }
    saveChat();
  } catch (error) {
    console.error('Error handling user input:', error);
    await addMessage('Ha ocurrido un error. Por favor intenta de nuevo.');
  }
}
function usePrompt(prompt) {
  userInput.value = prompt;
  handleUserInput();
}
function clearChat() {
  while (chatMessages.children.length > 1) {
    chatMessages.removeChild(chatMessages.lastChild);
  }
  userInput.value = '';
  conversationContext.messages = [];
  saveChat();
}
let isDarkMode = true;
function toggleDarkMode() {
  isDarkMode = !isDarkMode;
  document.body.style.background = isDarkMode ? '#343541' : '#f0f2f5';
  document.body.style.color = isDarkMode ? '#fff' : '#333';
}
const handleKeyPress = e => {
  if (e.key === 'Enter') {
    handleUserInput();
  }
};
const chatHistory = [];
function saveChat() {
  const messages = Array.from(chatMessages.children).map(msg => ({
    content: msg.textContent,
    isUser: msg.classList.contains('user-message')
  }));
  if (messages.length > 1) {
    const firstUserMessage = messages.find(m => m.isUser)?.content;
    let chatTitle = 'New Chat';
    if (firstUserMessage) {
      const words = firstUserMessage.split(' ').filter(w => w.length > 3);
      if (words.length > 0) {
        chatTitle = words.slice(0, 3).join(' ');
        if (words.length > 3) chatTitle += '...';
      }
    }
    const existingIndex = chatHistory.findIndex(c => c.id === currentChatId);
    if (existingIndex > -1) {
      chatHistory.splice(existingIndex, 1);
    }
    chatHistory.unshift({
      id: currentChatId || Date.now(),
      title: chatTitle,
      messages,
      timestamp: new Date().toISOString()
    });
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    renderChatHistory();
  }
}
function loadChatHistory() {
  const saved = localStorage.getItem('chatHistory');
  if (saved) {
    chatHistory.push(...JSON.parse(saved));
  }
}
let currentChatId = Date.now();
function renderChatHistory() {
  const historyContainer = document.querySelector('.chat-history');
  historyContainer.innerHTML = '';
  chatHistory.forEach(chat => {
    const item = document.createElement('div');
    item.className = 'chat-history-item';
    const icon = chat.messages.length > 1 ? '💬' : '🆕';
    item.innerHTML = `
      <span class="icon">${icon}</span>
      <span class="title">${chat.title}</span>
    `;
    item.addEventListener('click', () => loadChatFromHistory(chat));
    historyContainer.appendChild(item);
  });
}
function loadChatFromHistory(chat) {
  clearChat();
  currentChatId = chat.id;
  chat.messages.forEach(msg => {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${msg.isUser ? 'user-message' : 'ai-message'}`;
    const avatar = document.createElement('div');
    avatar.className = `avatar ${msg.isUser ? 'user-avatar' : 'ai-avatar'}`;
    avatar.innerHTML = msg.isUser ? '👤' : `<img src="/a/ed07eba3-87d8-4778-a0f5-e280f453f59d" alt="Quanti Logo">`;
    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    contentDiv.textContent = msg.content;
    messageDiv.appendChild(avatar);
    messageDiv.appendChild(contentDiv);
    chatMessages.appendChild(messageDiv);
  });
  conversationContext.messages = chat.messages.map(msg => ({
    role: msg.isUser ? 'user' : 'assistant',
    content: msg.content
  }));
  if (window.innerWidth <= 768) {
    document.querySelector('.chat-history').classList.remove('visible');
    document.querySelector('.chat-container').classList.remove('with-history');
  }
}
function startNewChat() {
  currentChatId = Date.now();
  saveChat();
  clearChat();
  const welcomeMessage = chatMessages.firstElementChild.cloneNode(true);
  chatMessages.innerHTML = '';
  chatMessages.appendChild(welcomeMessage);
  welcomeMessage.querySelector('.message-content').innerHTML = `¡Hola! Soy Quanti, tu asistente virtual avanzado con capacidades similares a GPT-4. Puedo ayudarte con:
&#x2022; Programación en múltiples lenguajes (Python, JavaScript, HTML, Lua, etc.)
&#x2022; Explicaciones detalladas sobre cualquier tema
&#x2022; Análisis y resolución de problemas complejos
&#x2022; Conversación natural y apoyo en diversos temas

¿En qué puedo ayudarte hoy?`;
  const initialAvatar = chatMessages.querySelector('.ai-message .ai-avatar');
  initialAvatar.innerHTML = '';
  const logoImg = document.createElement('img');
  logoImg.src = '/a/ed07eba3-87d8-4778-a0f5-e280f453f59d';
  logoImg.alt = 'Quanti Logo';
  initialAvatar.appendChild(logoImg);
  userInput.focus();
  const chatTitle = 'New Chat';
  chatHistory.unshift({
    id: currentChatId,
    title: chatTitle,
    messages: [{
      content: welcomeMessage.textContent,
      isUser: false
    }],
    timestamp: new Date().toISOString()
  });
  renderChatHistory();
}
sendBtn.addEventListener('click', handleUserInput);
userInput.addEventListener('keypress', handleKeyPress);
newChatBtn.addEventListener('click', startNewChat);
window.addEventListener('DOMContentLoaded', () => {
  loadChatHistory();
  renderChatHistory();
  userInput.focus();
  document.querySelector('.chat-container').classList.add('with-history');
  document.querySelector('.chat-history').classList.add('visible');
  const toggleBtn = document.createElement('button');
  toggleBtn.className = 'chat-history-toggle';
  toggleBtn.innerHTML = '☰';
  toggleBtn.style.position = 'fixed';
  toggleBtn.style.left = '20px';
  toggleBtn.style.top = '20px';
  toggleBtn.style.zIndex = '1000';
  toggleBtn.onclick = () => {
    const history = document.querySelector('.chat-history');
    const container = document.querySelector('.chat-container');
    history.classList.toggle('visible');
    container.classList.toggle('with-history');
  };
  document.body.appendChild(toggleBtn);
  const initialAvatar = document.querySelector('.ai-message .ai-avatar');
  if (initialAvatar) {
    initialAvatar.innerHTML = '';
    const logoImg = document.createElement('img');
    logoImg.src = '/a/ed07eba3-87d8-4778-a0f5-e280f453f59d';
    logoImg.alt = 'Quanti Logo';
    initialAvatar.appendChild(logoImg);
  }
});</script>
</body></html>
